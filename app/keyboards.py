from typing import Literal, Required, TypedDict

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.database.requests.keyboards import IngredientNamesHint
from app.database.requests.user import CoffeePointHint

TYPE_ITEM = Literal["drink_item_", "update_item_", "ingredient_item_"]
# drink_item_ - –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞–ø–∏—Ç–∫–æ–≤.
# ingredient_item_ - –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω–≥–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
# update_item_ - –≤ —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫.

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫
# TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ ENUM + –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
CALLBACK_BACK_TO_START = "back_to_start"
CALLBACK_INGREDIENTS = "ingredients"
CALLBACK_DRINKS = "drinks_coffee_point_"
CALLBACK_SEND_REVIEW = "send_review"
CALLBACK_ADMIN_PANEL = "admin_panel"
CALLBACK_ADD_INGREDIENT = "add_ingredient"
CALLBACK_ADD_DRINK = "add_drink"
CALLBACK_UPDATE_ITEM_STOP = "update_item_stop"
CALLBACK_FEEDBACK_SUGGESTION = "feedback_type:suggestion"
CALLBACK_FEEDBACK_REVIEW = "feedback_type:review"
CALLBACK_CONTACTS = "contacts"
CALLBACK_GOOD_WISH = "good_wish"
CALLBACK_FEEDBACK = "feedback"
CALLBACK_COFFEE_POINTS = "coffee_points"
CALLBACK_COFFEE_POINT_PREFIX = "coffee_point_"
CALLBACK_ITEM_PREFIX = "drink_item_"
CALLBACK_PROMOTION = "promotion"

class PrevStep(TypedDict):
    """–•–∏–Ω—Ç –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–∫—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏."""

    text: Required[str]
    callback_data: Required[str]

def create_main_keyboard_with_points(is_admin: bool, coffee_points: list[CoffeePointHint]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –∫–æ—Ñ–µ–π–Ω—ã—Ö —Ç–æ—á–µ–∫."""
    inline_builder = InlineKeyboardBuilder()

    inline_builder.row(
        InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!", callback_data=CALLBACK_GOOD_WISH),
        InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        InlineKeyboardButton(text="–ê–∫—Ü–∏—è ü•≥", callback_data=CALLBACK_PROMOTION),
        )

    # –ö–Ω–æ–ø–∫–∏ –∫–æ—Ñ–µ–π–Ω—ã—Ö —Ç–æ—á–µ–∫ (–º–∞–∫—Å–∏–º—É–º 2 –≤ —Å—Ç—Ä–æ–∫–µ)
    for point in coffee_points:
        point_text = f"{point['name']}"
        if point["metro_station"]:
            point_text += f" ({point['metro_station']})"
        inline_builder.row(InlineKeyboardButton(
            text=point_text,
            callback_data=f"{CALLBACK_COFFEE_POINT_PREFIX}{point['id']}"
        ))

    # –ö–Ω–æ–ø–∫–∞ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if is_admin:
        inline_builder.row(InlineKeyboardButton(text="Admin", callback_data=CALLBACK_ADMIN_PANEL))

    return inline_builder.as_markup()

def create_custom_inlline_button(callback_data: str, text: str = "–ù–∞–∑–∞–¥") -> InlineKeyboardButton:
    """–§—É–Ω–∫—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–∫—É.

    Args:
        callback_data: —Å—Ç—Ä–æ–∫–∞, –ø—É—Ç—å –¥–æ —Ä–æ—É—Ç–µ—Ä–∞.
        text: —Ç–µ–∫—Å—Ç –∫–Ω–æ–∫–∏. Defaults to "–ù–∞–∑–∞–¥".
    """
    return InlineKeyboardButton(text=text, callback_data=callback_data)


# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ start.
back_to_start_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data=CALLBACK_BACK_TO_START)]]
)
back_to_start_or_send_review_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ", callback_data=CALLBACK_SEND_REVIEW)],
        [back_to_start_keyboard.inline_keyboard[0][0]],
    ]
)

# –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
back_to_ingredients = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="ingredients")],
    ]
)

async def make_back_to_drinks_kb(point_id: int) -> InlineKeyboardMarkup:
    """—Å–æ–∑–¥–∞–Ω–∏–µ inline –∫–Ω–æ–∫–∏ –Ω–∞–∑–∞–¥.

    Args:
        point_id: ID –∫–æ—Ñ–µ–π–Ω–æ–π —Ç–æ—á–∫–∏.
    """
    callback_data = f"{CALLBACK_DRINKS}{point_id}"
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=callback_data)]])
# back_to_drinks = InlineKeyboardMarkup(
#     inline_keyboard=[
#         # [InlineKeyboardButton(text="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã", callback_data="ingredients")],
#         [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="drinks")],
#     ]
# )

def create_main_keyboard(is_admin: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É 'Admin' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data="drinks"),
            # InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        ],
        [InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è!", callback_data="good_wish")],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback")],
    ]
    if is_admin:  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Admin
        keyboard_buttons.append([InlineKeyboardButton(text="Admin", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def create_point_keyboard(point_id: int, prev_step: PrevStep | None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫—É 'Admin' –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    keyboard_buttons = [
        [
            InlineKeyboardButton(text="–ù–∞–ø–∏—Ç–∫–∏", callback_data=f"{CALLBACK_DRINKS}{point_id}"),
            # InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts"),
        ],
        [InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback")],
    ]
    if prev_step:
        button = [InlineKeyboardButton(text=prev_step["text"], callback_data=prev_step["callback_data"])]
        keyboard_buttons.append(button)
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def inline_builder(names: list[IngredientNamesHint],
                   item: TYPE_ITEM = "drink_item_",
                   prev_callback_data: str | None = None,
                   prev_text: str = "–ù–∞–∑–∞–¥") -> InlineKeyboardMarkup:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–µ—Ç inline –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞–ø–∏—Ç–∫–æ–≤ | –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.

    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–∏—Ç–∫–∞ –≤ –ë–î.

    Args:
        names: —Å–ø–∏—Å–æ–∫ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤.
        item: –ø—Ä–µ—Ñ–∏–∫—Å –∫ –Ω–∞–ø–∏—Ç–∫–∞–º. –Ø–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–∞–≤–Ω—ã–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è callback, –ø—Ä–µ—Ñ–∏–∫—Å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.
        prev_callback_data: callback_data, –ø—É—Ç—å –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–æ–≤–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä.
        prev_text: —Ç–µ–∫—Å—Ç –∫–Ω–ø–æ–∫–∏.
    """
    inline_builder = InlineKeyboardBuilder()
    for value in names:
        inline_builder.add(InlineKeyboardButton(text=value["name"], callback_data=f"{item}{value['id']}"))
    inline_builder.adjust(2)  # —Å–æ–±–∏—Ä–∞–∞–µ–º —Ç–æ —á—Ç–æ –ø—Ä–∏—à–ª–æ –∏–∑ –ë–î
    # if item == "drink_item_":
    #     inline_button = 
    #     keyboard.row(back_to_start_keyboard.inline_keyboard[0][0])  # –ø–æ—Å–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –Ω–∞ —Å—Ç–∞—Ä—Ç.
    # # elif item == "ingredient_item_":
    # #     keyboard.row(back_to_drinks.inline_keyboard[1][0])
    # else:
    #     # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∫ –Ω–∞–ø–∏—Ç–∫–∞–º.
    #     keyboard.row(InlineKeyboardButton(text="–•–≤–∞—Ç–∏—Ç", callback_data="update_item_stop"))
    if prev_callback_data:
        callback_data_button = create_custom_inlline_button(callback_data=prev_callback_data, text=prev_text)
        inline_builder.row(callback_data_button)

    return inline_builder.as_markup()


# –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞.
inline_admin_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", callback_data="add_ingredient")],
        [InlineKeyboardButton(text="–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞", callback_data="add_drink")],
        [back_to_start_keyboard.inline_keyboard[0][0]],
    ]
)

# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –û–°.
inline_feedback = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="feedback_type:suggestion"),
            InlineKeyboardButton(text="–û—Ç–∑—ã–≤", callback_data="feedback_type:review"),
        ],
            [back_to_start_keyboard.inline_keyboard[0][0]],
    ],
    row_width=2,
)
